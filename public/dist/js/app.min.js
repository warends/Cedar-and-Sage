'use strict';

var app = angular.module('hb-interiors', ['home', 'services', 'common', 'ed', 'post', 'about.controller', 'ui.router', 'ngScrollReveal', 'ngSanitize']);

app.config(['$locationProvider', '$stateProvider', '$urlRouterProvider', function ($locationProvider, $stateProvider, $urlRouterProvider) {

    $urlRouterProvider.otherwise('/');
    $locationProvider.html5Mode(true);

    $stateProvider.state('home', {
        url: '/',
        templateUrl: '/uiViews/home',
        controller: 'HomeController'
    }).state('services', {
        url: '/services',
        templateUrl: '/uiViews/services',
        controller: 'ServiceController'
    }).state('e-design', {
        url: '/e-design',
        templateUrl: '/uiViews/e-design',
        controller: 'EDesignController'
    }).state('about', {
        url: '/about',
        templateUrl: '/uiViews/about',
        controller: 'AboutController'
    }).state('services.detail', {
        url: '/:slug',
        templateUrl: '/uiViews/services-detail',
        controller: 'SelectedServiceController'
    }).state('posts', {
        url: '/posts',
        templateUrl: '/uiViews/posts',
        controller: 'PostsController'
    }).state('post-detail', {
        url: '/post/:slug',
        templateUrl: 'uiViews/post-detail',
        controller: 'PostDetailController'
    });
}]);

app.run(['$rootScope', '$location', function ($rootScope, $location) {

    $rootScope.toggleContact = function () {
        $rootScope.contactShow = !$rootScope.contactShow;
    };
    $rootScope.qShow = false;
    $rootScope.toggleQForm = function () {
        $rootScope.qShow = !$rootScope.qShow;
    };

    $rootScope.$on("$stateChangeSuccess", function (event, currentRoute, previousRoute) {
        window.scrollTo(0, 0);
    });
}]);
'use strict';

angular.module('about.controller', []).controller('AboutController', ['$scope', 'Meta', function ($scope, Meta) {

    Meta.setTitle('About');
}]);
'use strict';

angular.module('common', ['common.modal', 'common.inview', 'common.meta', 'common.nav', 'common.notifier']);
'use strict';

angular.module('common.inview', []).directive('inView', ['$window', function ($window) {
    return {
        restrict: 'A',
        scope: {
            viewObj: '='
        },
        link: function link(scope, element, attrs) {
            angular.element($window).bind('scroll', function () {
                var $el = element[0],
                    pos = $el.getBoundingClientRect();
                //check to see if active class, if not, start animations with js and define selectors
                if (pos.top + scope.viewObj.offset < $window.scrollY) {
                    scope.viewObj.visible = true;
                    //console.log('in view :' + scope.viewObj.visible);
                }
                // else {
                //     scope.viewObj.visible = false;
                // }
                scope.$apply();
            });
        }

    };
}]);
'use strict';

angular.module('common.meta', []).factory('Meta', function () {
  var _title = 'Cedar + Sage Affordable Online Interior Design';
  var desc = 'Where DIY meets professional interior design. We offer online interior design, space planning, branding, residential and furniture design.';
  return {
    title: function title() {
      return _title;
    },
    setTitle: function setTitle(newTitle) {
      _title = newTitle;
    },
    description: function description() {
      return desc;
    },
    setDesc: function setDesc(newDesc) {
      desc = newDesc;
    }
  };
}).controller('MetaController', ['$scope', 'Meta', function ($scope, Meta) {
  $scope.Meta = Meta;
  $scope.metaDesc = Meta;
}]);
'use strict';

angular.module('common.modal', []).directive('globalModal', ['$rootScope', function ($rootScope) {

  return {
    restrict: 'E',
    scope: {
      show: '='
    },
    replace: true,
    transclude: true,
    link: function link(scope, element, attrs) {
      scope.dialogStyle = {};
      if (attrs.width) scope.dialogStyle.width = attrs.width;
      if (attrs.height) scope.dialogStyle.height = attrs.height;

      scope.hideModal = function () {
        $rootScope.contactShow = false;
        $rootScope.qShow = false;
        scope.show = false;
      };
    },
    templateUrl: '/uiViews/modal'
  };
}]);
'use strict';

angular.module('common.nav', []).controller('NavController', ['$scope', '$rootScope', '$http', '$window', 'NotifierService', function ($scope, $rootScope, $http, $window, notifier) {

    $scope.formData = {};

    $scope.sendContact = function () {
        $http.post('/contact-form', $scope.formData).then(function (message, status, headers, config) {
            $rootScope.toggleContact();
            console.log(message);
            notifier.notify('Thank you for your message ' + message.data.name);
            $scope.formData = {};
        }, function (error, status, headers, config) {
            console.log(error);
        });
    };

    $scope.selected = false;
    $scope.toggleMenu = function () {
        if ($window.innerWidth < 992) {
            $scope.selected = !$scope.selected;
        }
    };

    $scope.socialShow = false;
    if ($window.innerWidth < 992) {
        angular.element($window).bind('scroll', function () {
            if ($window.scrollY > 140) {
                $scope.socialShow = true;
            } else {
                $scope.socialShow = false;
            }
        });
    }
}]);
'use strict';

angular.module('hb-interiors').value('notific8', notific8);

angular.module('common.notifier', []).factory('NotifierService', ['notific8', function (notific8) {

  notific8('configure', {
    life: 3000,
    theme: 'atomic',
    zindex: 9999,
    verticalEdge: 'right',
    horizontalEdge: 'top',
    closeText: 'X'
  });

  return {
    notify: function notify(message) {
      notific8(message, { color: 'pear' });
      console.log(message);
    },
    error: function error(message) {
      notific8(message, { color: 'tomato' });
      console.log(message);
    }
  };
}]);
'use strict';

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

angular.module('ed.controller', []).controller('EDesignController', ['$scope', '$rootScope', '$http', '$window', 'QFactory', 'NotifierService', 'Meta', function ($scope, $rootScope, $http, $window, QFactory, notifier, Meta) {

    Meta.setTitle('E-Design');
    Meta.setDesc("Professional online interior deisgn program guiding the DIY'er.");

    window.scrollTo(0, 0);

    $scope.screenW = $window.innerWidth;

    $scope.colorList = [];
    $scope.colorNoList = [];
    $scope.drawnToList = [];
    $scope.furnitureList = [];
    $scope.formData = {};
    function addToList(answer, list) {
        var index = list.indexOf(answer);
        if (index > -1) {
            list.splice(index, 1);
        } else {
            list.push(answer);
        }
    }
    $scope.toggleColor = function (answer, question) {
        if (question == 'q2') {
            addToList(answer, $scope.drawnToList);
        } else if (question == 'q3') {
            addToList(answer, $scope.furnitureList);
        } else if (question == 'q5') {
            addToList(answer, $scope.colorList);
        } else {
            addToList(answer, $scope.colorNoList);
        }
    };

    $scope.select = function (e) {
        var box = angular.element(e.target);
    };

    var qForm = document.getElementById('qFormTitle');
    $scope.questions = QFactory.list();
    $scope.currentQuestion = 0;

    $scope.isCurrentQIndex = function (index) {
        return $scope.currentQuestion === index;
    };

    $scope.nextQ = function () {
        qForm.scrollIntoView(true);
        $scope.currentQuestion = $scope.currentQuestion < $scope.questions.length - 1 ? ++$scope.currentQuestion : 0;
    };

    $scope.prevQ = function () {
        qForm.scrollIntoView(true);
        $scope.currentQuestion = $scope.currentQuestion > 0 ? --$scope.currentQuestion : $scope.questions.length - 1;
    };

    $scope.submitQuestionaire = function () {
        var _data;

        var data = (_data = {
            q1: $scope.questions[0].response,
            q2: $scope.drawnToList,
            q3: $scope.furnitureList,
            q4: $scope.questions[3].response
        }, _defineProperty(_data, 'q4', $scope.colorList), _defineProperty(_data, 'q5', $scope.colorNoList), _defineProperty(_data, 'name', $scope.formData.name), _defineProperty(_data, 'email', $scope.formData.email), _defineProperty(_data, 'phone', $scope.formData.phone), _defineProperty(_data, 'note', $scope.formData.note), _data);

        $http.post('/questionaire-form', data).then(function (response) {
            $scope.currentQuestion = 0;
            $rootScope.qShow = false;
            notifier.notify('Thank you for your message ' + response.data.name);
            $scope.qForm.$setPristine();
            $scope.colorList = [];
            $scope.colorNoList = [];
            $scope.drawnToList = [];
            $scope.furnitureList = [];
            $scope.formData = {};
        }, function (err) {
            notifier.error('There was an error processing your request. Please try again');
            console.log('There was a problem submitting your form ' + err);
        });
    };

    $scope.mySplit = function (string, i) {
        var array = string.split('-');
        if (array[i + 1] === undefined) {
            return array[i];
        } else if (array[i + 2] === undefined) {
            return array[i] + ' ' + array[i + 1];
        } else {
            return array[i] + ' ' + array[i + 1] + ' ' + array[i + 2];
        }
    };
}]);
'use strict';

angular.module('ed', ['ed.controller', 'questionaire.factory']);
'use strict';

angular.module('questionaire.factory', []).factory('QFactory', function () {

    var questions = [{
        id: 'q1',
        type: 'radio',
        question: 'Which space would you like designed first?',
        cols: 'col-xs-4',
        answers: ['Living', 'Bedroom', 'Dining', 'Bath', 'Kitchen', 'Other'],
        response: ''
    }, {
        id: 'q2',
        type: 'checkbox',
        question: 'Which image(s) are you drawn to?',
        cols: 'col-xs-6 col-sm-4',
        images: [{
            name: 'img1',
            selected: false
        }, {
            name: 'img2',
            selected: false
        }, {
            name: 'img3',
            selected: false
        }, {
            name: 'img4',
            selected: false
        }, {
            name: 'img5',
            selected: false
        }, {
            name: 'img6',
            selected: false
        }]
    }, {
        id: 'q3',
        type: 'checkbox',
        question: 'Where would you shop for furniture?',
        cols: 'col-xs-6 col-sm-4',
        images: [{
            name: 'ikea',
            selected: false
        }, {
            name: 'pier-1',
            selected: false
        }, {
            name: 'west-elm',
            selected: false
        }, {
            name: 'crate-&-barrel',
            selected: false
        }, {
            name: 'cb2',
            selected: false
        }, {
            name: 'restoration-hardware',
            selected: false
        }]
    }, {
        id: 'q4',
        type: 'radio',
        question: 'How much money are you budgeting for your project after the design fee, which begins around $1,500 per space?',
        cols: 'col-xs-6 col-sm-4',
        answers: ['1-2', '2-5', '5-10', '10-15', '15-25', '25up'],
        response: ''
    }, {
        id: 'q5',
        type: 'checkbox',
        question: 'What colors would you like to see in the design',
        cols: 'col-color',
        design: 'colors',
        colors: [{ name: 'Black',
            selected: false
        }, { name: 'Grey',
            selected: false
        }, { name: 'Red',
            selected: false
        }, { name: 'Orange',
            selected: false
        }, { name: 'Yellow',
            selected: false
        }, { name: 'Lime',
            selected: false
        }, { name: 'Green',
            selected: false
        }, { name: 'Aqua',
            selected: false
        }, { name: 'Turquoise',
            selected: false
        }, { name: 'Slate',
            selected: false
        }, { name: 'Blue',
            selected: false
        }, { name: 'Purple',
            selected: false
        }, { name: 'Pink',
            selected: false
        }, { name: 'Brown',
            selected: false
        }, { name: 'Cream',
            selected: false
        }, { name: 'White',
            selected: false
        }]
    }, {
        id: 'q6',
        type: 'checkbox',
        question: 'Select which colors you would NOT want to see',
        cols: 'col-color',
        colors: [{ name: 'Black',
            selected: false
        }, { name: 'Grey',
            selected: false
        }, { name: 'Red',
            selected: false
        }, { name: 'Orange',
            selected: false
        }, { name: 'Yellow',
            selected: false
        }, { name: 'Lime',
            selected: false
        }, { name: 'Green',
            selected: false
        }, { name: 'Aqua',
            selected: false
        }, { name: 'Turquoise',
            selected: false
        }, { name: 'Slate',
            selected: false
        }, { name: 'Blue',
            selected: false
        }, { name: 'Purple',
            selected: false
        }, { name: 'Pink',
            selected: false
        }, { name: 'Brown',
            selected: false
        }, { name: 'Cream',
            selected: false
        }, { name: 'White',
            selected: false
        }]
    }, {
        id: 'q7',
        type: 'text'
    }];

    return {
        list: function list() {
            return questions;
        }
    };
});
'use strict';

angular.module('banner.dir', []).directive('pageBanner', function () {
  return {
    restrict: 'E',
    templateUrl: '/uiViews/banner',
    replace: true,
    scope: { bgImage: '@' }
  };
});
'use strict';

angular.module('box.height.dir', []).directive('boxHeight', ['$window', '$timeout', function ($window, $timeout) {
  return {
    restrict: 'A',
    link: function link(scope, elem, attrs) {
      $timeout(function () {
        scope.newHeight = elem[0].offsetHeight;
      }, 1000);
      angular.element($window).bind('resize', function () {
        scope.$apply(function () {
          scope.newHeight = elem[0].offsetHeight;
        });
      });
    }
  };
}]);

angular.module('target.height.dir', []).directive('targetHeight', function () {
  return {
    restrict: 'A',
    link: function link(scope, elem, attrs) {
      scope.$watch('newHeight', function (newV, oldV) {
        //console.log('old value ' + oldV, 'new value ' + newV);
        elem.attr('style', 'height: ' + newV + 'px');
      });
    }
  };
});
'use strict';

angular.module('home.controller', []).controller('HomeController', ['$scope', '$window', '$http', 'ServiceFactory', 'Meta', 'NotifierService', function ($scope, $window, $http, ServiceFactory, Meta, notifier) {

    Meta.setTitle('Home');
    //Meta.setDesc('This is the desc');

    $scope.screenW = $window.innerWidth;

    $scope.services = ServiceFactory.list();

    $scope.welcome = {
        visible: false,
        offset: -200
    };

    $scope.drawingData = {};

    $scope.enterDrawing = function () {
        //   {
        //     "email_address": "urist.mcvankab@freddiesjokes.com",
        //     "status": "subscribed",
        //     "merge_fields": {
        //         "FNAME": "Urist",
        //         "LNAME": "McVankab"
        //     }
        // }
        $http.post('/enter-drawing', $scope.drawingData).then(function (message, status, headers, config) {
            console.log(message);
            notifier.notify('Thank you for entering ' + message.data.name + '. We will contact you if you win!');
            $scope.drawingData = {};
        }, function (error, status, headers, config) {
            console.log(error);
        });
    };

    $scope.options = {
        origin: 'left',
        distance: '150px',
        easing: 'ease-in-out',
        delay: 30,
        scale: 1,
        duration: 1000,
        // reset: true,
        //    afterReveal: function (domEl) {
        //        document.getElementById("gallery").style.visibility = "visible";
        //    },
        sequence: {
            selector: '.col-md-5',
            interval: 300
        }
    };
}]);
'use strict';

angular.module('home', ['home.controller', 'box.height.dir', 'target.height.dir', 'banner.dir']);
'use strict';

angular.module('post-detail.controller', []).controller('PostDetailController', ['$scope', '$stateParams', '$http', 'Meta', 'NotifierService', function ($scope, $stateParams, $http, Meta, notifier) {

    Meta.setTitle('Post Detail');
    $scope.post;
    var slug = $stateParams.slug;

    $http.get('/api/post/' + slug).then(function (res) {
        $scope.post = res.data;
        console.log(res.data);
    });
}]);
'use strict';

angular.module('post', ['posts.controller', 'post-detail.controller']);
'use strict';

angular.module('posts.controller', []).controller('PostsController', ['$scope', '$window', '$http', 'Meta', 'NotifierService', function ($scope, $window, $http, Meta, notifier) {

    Meta.setTitle('Posts');
    $scope.posts;

    $http.get('/api/posts/list').then(function (res) {
        $scope.posts = res.data;
        console.log(res.data);
    });
}]);
'use strict';

angular.module('service.controller', []).controller('ServiceController', ['$scope', '$stateParams', 'ServiceFactory', 'Meta', function ($scope, $stateParams, ServiceFactory, Meta) {

    $scope.services = ServiceFactory.list();
}]);

angular.module('service.detail.controller', []).controller('SelectedServiceController', ['$scope', '$stateParams', 'ServiceFactory', 'Meta', function ($scope, $stateParams, ServiceFactory, Meta) {

    $scope.selectedService = ServiceFactory.find($stateParams.slug);
    $scope.branding = false;
    $scope.branding = $scope.selectedService.name === 'Branding' ? true : false;

    Meta.setTitle($scope.selectedService.name);

    if (!Element.prototype.matches) {
        Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector || function (s) {
            var matches = (this.document || this.ownerDocument).querySelectorAll(s),
                i = matches.length;
            while (--i >= 0 && matches.item(i) !== this) {}
            return i > -1;
        };
    }

    $scope.bookShow1 = false;
    $scope.bookShow2 = false;
    $scope.toggleBook1 = function () {
        $scope.bookShow1 = true;
    };
    $scope.toggleBook2 = function () {
        $scope.bookShow2 = true;
    };

    var getClosest = function getClosest(elem, selector) {
        // Get closest match
        for (; elem && elem !== document; elem = elem.parentNode) {
            if (elem.matches(selector)) return elem;
        }
        return null;
    };

    $scope.nextPage = function () {
        angular.element(document.querySelectorAll('.active')).removeClass('active').addClass('flipped').next(document.querySelector('.page')).addClass('active');
        // $('.active')
        //   .removeClass('active')
        //   .addClass('flipped')
        //   .next('.page')
        //   .addClass('active')
        //   .siblings();
    };

    $scope.prevPage = function () {
        $('.flipped').last().removeClass('flipped').addClass('active').siblings('.page').removeClass('active');
        // var elem = document.querySelector('.flipped');
        //.last()
        // elem.removeClass('flipped')
        // .addClass('active')
        // .next(document.querySelector('.page'))
        // .removeClass('active');
    };

    $scope.currentPage = 0;
}]);
'use strict';

angular.module('service.factory', []).factory('ServiceFactory', function () {
  var services = [{
    name: 'Interior Design',
    slug: 'interior-design',
    logo: 'img/icons/home.svg',
    banner: 'img/services/master-br.png',
    subHead: 'amplifying client spaces',
    desc: "Local to the Bend, Oregon area? We are here to assist you in your design needs. We want you to feel at home in your home. We’d love to get to know you to develop a style that is all your own. A design package with concepts and a floor plan will be created all the way through installation. Contact us for a free consultation!",
    img1: 'img/services/kitchen.png',
    img1Alt: 'Kitchen designed with locally sourced wood',
    img2: 'img/services/interior-design.png',
    img2Alt: 'Interior design finishes and fabrics'
  }, {
    name: 'Branding',
    slug: 'branding',
    logo: 'img/icons/finger-print.svg',
    banner: 'img/services/branding.jpg',
    subHead: 'Helping your customers get to know you',
    desc: "For businesses, it is important to be able to stand out. By creating branding tools that potential clients or architects can get their hands on, we will help move you to the front of the line. We can develop business tools that reflect your vision and reach your specific audience, such as portfolio booklets and business cards.",
    img1: 'img/services/branding1.png',
    img1Alt: 'Post 31 Interiors marketing booklet',
    img2: 'img/services/branding2.png',
    img2Alt: 'Billy Ceglia marketing booklet'
  }, {
    name: 'Space Planning',
    slug: 'space-planning',
    logo: 'img/icons/measurement.svg',
    banner: 'img/services/floor-plan.png',
    subHead: 'making your space functional',
    desc: "What is space planning? It is creating a highly functional furniture arrangement. Would you like assistance arranging the layout of your space? We are here to help! We will organize your existing or new furniture in a way that creates a more natural and functional flow with a customized floor plan that you will love.",
    img1: 'img/services/floorplan-spaceplanning.jpg',
    img1Alt: 'Floor plan created in photoshop',
    img2: 'img/services/floorplan.png',
    img2Alt: 'Open floor plan'
  }, {
    name: 'Furniture Design',
    slug: 'furniture',
    logo: 'img/icons/chair1.svg',
    banner: 'img/services/bench.png',
    subHead: 'creating individualized products',
    desc: "We love producing industrial, rustic and sustainable pieces here in Bend, OR. These can be brand new pieces or repurposed furniture. If you have an heirloom piece that you cannot bear to throw away, we may be able to give it a new look.  We would love to be part of the process to create that perfect piece for you.",
    img1: 'img/services/bench-paint.png',
    img1Alt: 'Rust-oleum spray paint covering',
    img2: 'img/services/table-work.png',
    img2Alt: "Murdoch's matte finish on large custom table"
  }];

  return {
    list: function list() {
      return services;
    },
    find: function find(slug) {
      return services.find(function (service) {
        return service.slug == slug;
      });
    }
  };
});
'use strict';

angular.module('services', ['service.controller', 'service.detail.controller', 'service.factory']);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
